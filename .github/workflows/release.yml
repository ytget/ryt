name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Set up environment
      run: |
        echo "CARGO_REGISTRY_TOKEN=${{ secrets.CARGO_REGISTRY_TOKEN }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
        
    - name: Build and test
      run: |
        cargo build --release
        cargo test
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "Generating changelog from $PREV_TAG to $TAG"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
        else
          echo "Generating changelog for first release $TAG"
          CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag }}
        release_name: Release ${{ steps.changelog.outputs.tag }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Downloads
          Binaries will be available in the Assets section below.
        draft: false
        prerelease: false
        
    - name: Build binaries
      run: |
        # Build for multiple platforms
        mkdir -p dist
        
        # Linux x86_64
        cargo build --release --target x86_64-unknown-linux-gnu
        cp target/x86_64-unknown-linux-gnu/release/ryt dist/ryt-linux-x86_64
        
        # macOS x86_64
        cargo build --release --target x86_64-apple-darwin
        cp target/x86_64-apple-darwin/release/ryt dist/ryt-macos-x86_64
        
        # macOS ARM64
        cargo build --release --target aarch64-apple-darwin
        cp target/aarch64-apple-darwin/release/ryt dist/ryt-macos-aarch64
        
        # Windows x86_64
        cargo build --release --target x86_64-pc-windows-gnu
        cp target/x86_64-pc-windows-gnu/release/ryt.exe dist/ryt-windows-x86_64.exe
        
    - name: Upload binaries to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: ryt-binaries
        asset_content_type: application/zip
        
    - name: Publish to crates.io
      if: startsWith(steps.changelog.outputs.tag, 'v')
      run: |
        # Only publish stable releases (not pre-releases)
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
